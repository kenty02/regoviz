/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * regoviz
 * api for regoviz
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

export const getGetSamplesMock = () =>
	Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1,
	).map(() => ({
		content: faker.word.sample(),
		file_name: faker.word.sample(),
	}));

export const getGetRulesMock = () =>
	Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1,
	).map(() => ({
		dependent_rules: Array.from(
			{ length: faker.number.int({ min: 1, max: 10 }) },
			(_, i) => i + 1,
		).map(() => faker.word.sample()),
		end_line: faker.number.int({ min: undefined, max: undefined }),
		rule_id: faker.word.sample(),
		start_line: faker.number.int({ min: undefined, max: undefined }),
	}));

export const getGetDepTreeTextMock = () => ({ result: faker.word.sample() });

export const getGetFlowchartMock = () => ({ result: faker.word.sample() });

export const getPostVarTraceMock = () => ({ result: faker.word.sample() });

export const getGetAstMock = () => ({ result: faker.word.sample() });

export const getDefaultMock = () => [
	http.get("*/samples", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGetSamplesMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
	http.get("*/rules", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGetRulesMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
	http.get("*/depTreeText", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGetDepTreeTextMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
	http.get("*/flowchart", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGetFlowchartMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
	http.post("*/varTrace", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getPostVarTraceMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
	http.get("*/ast", async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGetAstMock()), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
			},
		});
	}),
];
