// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type AstGetOK struct {
	// The generated AST.
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *AstGetOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *AstGetOK) SetResult(val string) {
	s.Result = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type CallTreeGetOK struct {
	Entrypoint RuleParent `json:"entrypoint"`
}

// GetEntrypoint returns the value of Entrypoint.
func (s *CallTreeGetOK) GetEntrypoint() RuleParent {
	return s.Entrypoint
}

// SetEntrypoint sets the value of Entrypoint.
func (s *CallTreeGetOK) SetEntrypoint(val RuleParent) {
	s.Entrypoint = val
}

type DepTreeTextGetOK struct {
	// The generated dependency tree.
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *DepTreeTextGetOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *DepTreeTextGetOK) SetResult(val string) {
	s.Result = val
}

type FlowchartGetOK struct {
	// The generated flowchart mermaid url.
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *FlowchartGetOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *FlowchartGetOK) SetResult(val string) {
	s.Result = val
}

type IrGetOK struct {
	// The generated IR.
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *IrGetOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *IrGetOK) SetResult(val string) {
	s.Result = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleChildElseType returns new OptRuleChildElseType with value set to v.
func NewOptRuleChildElseType(v RuleChildElseType) OptRuleChildElseType {
	return OptRuleChildElseType{
		Value: v,
		Set:   true,
	}
}

// OptRuleChildElseType is optional RuleChildElseType.
type OptRuleChildElseType struct {
	Value RuleChildElseType
	Set   bool
}

// IsSet returns true if OptRuleChildElseType was set.
func (o OptRuleChildElseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleChildElseType) Reset() {
	var v RuleChildElseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleChildElseType) SetTo(v RuleChildElseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleChildElseType) Get() (v RuleChildElseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleChildElseType) Or(d RuleChildElseType) RuleChildElseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleChildType returns new OptRuleChildType with value set to v.
func NewOptRuleChildType(v RuleChildType) OptRuleChildType {
	return OptRuleChildType{
		Value: v,
		Set:   true,
	}
}

// OptRuleChildType is optional RuleChildType.
type OptRuleChildType struct {
	Value RuleChildType
	Set   bool
}

// IsSet returns true if OptRuleChildType was set.
func (o OptRuleChildType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleChildType) Reset() {
	var v RuleChildType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleChildType) SetTo(v RuleChildType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleChildType) Get() (v RuleChildType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleChildType) Or(d RuleChildType) RuleChildType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleParent returns new OptRuleParent with value set to v.
func NewOptRuleParent(v RuleParent) OptRuleParent {
	return OptRuleParent{
		Value: v,
		Set:   true,
	}
}

// OptRuleParent is optional RuleParent.
type OptRuleParent struct {
	Value RuleParent
	Set   bool
}

// IsSet returns true if OptRuleParent was set.
func (o OptRuleParent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleParent) Reset() {
	var v RuleParent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleParent) SetTo(v RuleParent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleParent) Get() (v RuleParent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleParent) Or(d RuleParent) RuleParent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleParentType returns new OptRuleParentType with value set to v.
func NewOptRuleParentType(v RuleParentType) OptRuleParentType {
	return OptRuleParentType{
		Value: v,
		Set:   true,
	}
}

// OptRuleParentType is optional RuleParentType.
type OptRuleParentType struct {
	Value RuleParentType
	Set   bool
}

// IsSet returns true if OptRuleParentType was set.
func (o OptRuleParentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleParentType) Reset() {
	var v RuleParentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleParentType) SetTo(v RuleParentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleParentType) Get() (v RuleParentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleParentType) Or(d RuleParentType) RuleParentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Rule
type Rule struct {
	// The ID of the rule.
	RuleID string `json:"rule_id"`
	// List of rule IDs this rule is dependent on.
	DependentRules []string `json:"dependent_rules"`
	// The start line of the rule in the source code.
	StartLine int32 `json:"start_line"`
	// The end line of the rule in the source code.
	EndLine int32 `json:"end_line"`
}

// GetRuleID returns the value of RuleID.
func (s *Rule) GetRuleID() string {
	return s.RuleID
}

// GetDependentRules returns the value of DependentRules.
func (s *Rule) GetDependentRules() []string {
	return s.DependentRules
}

// GetStartLine returns the value of StartLine.
func (s *Rule) GetStartLine() int32 {
	return s.StartLine
}

// GetEndLine returns the value of EndLine.
func (s *Rule) GetEndLine() int32 {
	return s.EndLine
}

// SetRuleID sets the value of RuleID.
func (s *Rule) SetRuleID(val string) {
	s.RuleID = val
}

// SetDependentRules sets the value of DependentRules.
func (s *Rule) SetDependentRules(val []string) {
	s.DependentRules = val
}

// SetStartLine sets the value of StartLine.
func (s *Rule) SetStartLine(val int32) {
	s.StartLine = val
}

// SetEndLine sets the value of EndLine.
func (s *Rule) SetEndLine(val int32) {
	s.EndLine = val
}

// Merged schema.
// Ref: #/components/schemas/RuleChild
type RuleChild struct {
	Name       OptString        `json:"name"`
	UID        OptString        `json:"uid"`
	Type       OptRuleChildType `json:"type"`
	Parent     OptRuleParent    `json:"parent"`
	Value      OptString        `json:"value"`
	Statements []RuleStatement  `json:"statements"`
}

// GetName returns the value of Name.
func (s *RuleChild) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *RuleChild) GetUID() OptString {
	return s.UID
}

// GetType returns the value of Type.
func (s *RuleChild) GetType() OptRuleChildType {
	return s.Type
}

// GetParent returns the value of Parent.
func (s *RuleChild) GetParent() OptRuleParent {
	return s.Parent
}

// GetValue returns the value of Value.
func (s *RuleChild) GetValue() OptString {
	return s.Value
}

// GetStatements returns the value of Statements.
func (s *RuleChild) GetStatements() []RuleStatement {
	return s.Statements
}

// SetName sets the value of Name.
func (s *RuleChild) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *RuleChild) SetUID(val OptString) {
	s.UID = val
}

// SetType sets the value of Type.
func (s *RuleChild) SetType(val OptRuleChildType) {
	s.Type = val
}

// SetParent sets the value of Parent.
func (s *RuleChild) SetParent(val OptRuleParent) {
	s.Parent = val
}

// SetValue sets the value of Value.
func (s *RuleChild) SetValue(val OptString) {
	s.Value = val
}

// SetStatements sets the value of Statements.
func (s *RuleChild) SetStatements(val []RuleStatement) {
	s.Statements = val
}

// Merged schema.
// Ref: #/components/schemas/RuleChildElse
type RuleChildElse struct {
	Name     OptString            `json:"name"`
	UID      OptString            `json:"uid"`
	Type     OptRuleChildElseType `json:"type"`
	Else     OptBool              `json:"else"`
	Parent   OptRuleParent        `json:"parent"`
	Children []RuleChild          `json:"children"`
}

// GetName returns the value of Name.
func (s *RuleChildElse) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *RuleChildElse) GetUID() OptString {
	return s.UID
}

// GetType returns the value of Type.
func (s *RuleChildElse) GetType() OptRuleChildElseType {
	return s.Type
}

// GetElse returns the value of Else.
func (s *RuleChildElse) GetElse() OptBool {
	return s.Else
}

// GetParent returns the value of Parent.
func (s *RuleChildElse) GetParent() OptRuleParent {
	return s.Parent
}

// GetChildren returns the value of Children.
func (s *RuleChildElse) GetChildren() []RuleChild {
	return s.Children
}

// SetName sets the value of Name.
func (s *RuleChildElse) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *RuleChildElse) SetUID(val OptString) {
	s.UID = val
}

// SetType sets the value of Type.
func (s *RuleChildElse) SetType(val OptRuleChildElseType) {
	s.Type = val
}

// SetElse sets the value of Else.
func (s *RuleChildElse) SetElse(val OptBool) {
	s.Else = val
}

// SetParent sets the value of Parent.
func (s *RuleChildElse) SetParent(val OptRuleParent) {
	s.Parent = val
}

// SetChildren sets the value of Children.
func (s *RuleChildElse) SetChildren(val []RuleChild) {
	s.Children = val
}

type RuleChildElseType string

const (
	RuleChildElseTypeChild RuleChildElseType = "child"
)

// AllValues returns all RuleChildElseType values.
func (RuleChildElseType) AllValues() []RuleChildElseType {
	return []RuleChildElseType{
		RuleChildElseTypeChild,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleChildElseType) MarshalText() ([]byte, error) {
	switch s {
	case RuleChildElseTypeChild:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleChildElseType) UnmarshalText(data []byte) error {
	switch RuleChildElseType(data) {
	case RuleChildElseTypeChild:
		*s = RuleChildElseTypeChild
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RuleChildType string

const (
	RuleChildTypeChild RuleChildType = "child"
)

// AllValues returns all RuleChildType values.
func (RuleChildType) AllValues() []RuleChildType {
	return []RuleChildType{
		RuleChildTypeChild,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleChildType) MarshalText() ([]byte, error) {
	switch s {
	case RuleChildTypeChild:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleChildType) UnmarshalText(data []byte) error {
	switch RuleChildType(data) {
	case RuleChildTypeChild:
		*s = RuleChildTypeChild
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RuleParent
type RuleParent struct {
	Name     OptString                `json:"name"`
	UID      OptString                `json:"uid"`
	Type     OptRuleParentType        `json:"type"`
	Default  OptString                `json:"default"`
	Children []RuleParentChildrenItem `json:"children"`
}

// GetName returns the value of Name.
func (s *RuleParent) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *RuleParent) GetUID() OptString {
	return s.UID
}

// GetType returns the value of Type.
func (s *RuleParent) GetType() OptRuleParentType {
	return s.Type
}

// GetDefault returns the value of Default.
func (s *RuleParent) GetDefault() OptString {
	return s.Default
}

// GetChildren returns the value of Children.
func (s *RuleParent) GetChildren() []RuleParentChildrenItem {
	return s.Children
}

// SetName sets the value of Name.
func (s *RuleParent) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *RuleParent) SetUID(val OptString) {
	s.UID = val
}

// SetType sets the value of Type.
func (s *RuleParent) SetType(val OptRuleParentType) {
	s.Type = val
}

// SetDefault sets the value of Default.
func (s *RuleParent) SetDefault(val OptString) {
	s.Default = val
}

// SetChildren sets the value of Children.
func (s *RuleParent) SetChildren(val []RuleParentChildrenItem) {
	s.Children = val
}

// RuleParentChildrenItem represents sum type.
type RuleParentChildrenItem struct {
	Type          RuleParentChildrenItemType // switch on this field
	RuleChild     RuleChild
	RuleChildElse RuleChildElse
}

// RuleParentChildrenItemType is oneOf type of RuleParentChildrenItem.
type RuleParentChildrenItemType string

// Possible values for RuleParentChildrenItemType.
const (
	RuleChildRuleParentChildrenItem     RuleParentChildrenItemType = "RuleChild"
	RuleChildElseRuleParentChildrenItem RuleParentChildrenItemType = "RuleChildElse"
)

// IsRuleChild reports whether RuleParentChildrenItem is RuleChild.
func (s RuleParentChildrenItem) IsRuleChild() bool { return s.Type == RuleChildRuleParentChildrenItem }

// IsRuleChildElse reports whether RuleParentChildrenItem is RuleChildElse.
func (s RuleParentChildrenItem) IsRuleChildElse() bool {
	return s.Type == RuleChildElseRuleParentChildrenItem
}

// SetRuleChild sets RuleParentChildrenItem to RuleChild.
func (s *RuleParentChildrenItem) SetRuleChild(v RuleChild) {
	s.Type = RuleChildRuleParentChildrenItem
	s.RuleChild = v
}

// GetRuleChild returns RuleChild and true boolean if RuleParentChildrenItem is RuleChild.
func (s RuleParentChildrenItem) GetRuleChild() (v RuleChild, ok bool) {
	if !s.IsRuleChild() {
		return v, false
	}
	return s.RuleChild, true
}

// NewRuleChildRuleParentChildrenItem returns new RuleParentChildrenItem from RuleChild.
func NewRuleChildRuleParentChildrenItem(v RuleChild) RuleParentChildrenItem {
	var s RuleParentChildrenItem
	s.SetRuleChild(v)
	return s
}

// SetRuleChildElse sets RuleParentChildrenItem to RuleChildElse.
func (s *RuleParentChildrenItem) SetRuleChildElse(v RuleChildElse) {
	s.Type = RuleChildElseRuleParentChildrenItem
	s.RuleChildElse = v
}

// GetRuleChildElse returns RuleChildElse and true boolean if RuleParentChildrenItem is RuleChildElse.
func (s RuleParentChildrenItem) GetRuleChildElse() (v RuleChildElse, ok bool) {
	if !s.IsRuleChildElse() {
		return v, false
	}
	return s.RuleChildElse, true
}

// NewRuleChildElseRuleParentChildrenItem returns new RuleParentChildrenItem from RuleChildElse.
func NewRuleChildElseRuleParentChildrenItem(v RuleChildElse) RuleParentChildrenItem {
	var s RuleParentChildrenItem
	s.SetRuleChildElse(v)
	return s
}

type RuleParentType string

const (
	RuleParentTypeParent RuleParentType = "parent"
)

// AllValues returns all RuleParentType values.
func (RuleParentType) AllValues() []RuleParentType {
	return []RuleParentType{
		RuleParentTypeParent,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RuleParentType) MarshalText() ([]byte, error) {
	switch s {
	case RuleParentTypeParent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RuleParentType) UnmarshalText(data []byte) error {
	switch RuleParentType(data) {
	case RuleParentTypeParent:
		*s = RuleParentTypeParent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RuleStatement
type RuleStatement struct {
	Name         OptString                       `json:"name"`
	UID          OptString                       `json:"uid"`
	Dependencies []RuleStatementDependenciesItem `json:"dependencies"`
}

// GetName returns the value of Name.
func (s *RuleStatement) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *RuleStatement) GetUID() OptString {
	return s.UID
}

// GetDependencies returns the value of Dependencies.
func (s *RuleStatement) GetDependencies() []RuleStatementDependenciesItem {
	return s.Dependencies
}

// SetName sets the value of Name.
func (s *RuleStatement) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *RuleStatement) SetUID(val OptString) {
	s.UID = val
}

// SetDependencies sets the value of Dependencies.
func (s *RuleStatement) SetDependencies(val []RuleStatementDependenciesItem) {
	s.Dependencies = val
}

// RuleStatementDependenciesItem represents sum type.
type RuleStatementDependenciesItem struct {
	Type       RuleStatementDependenciesItemType // switch on this field
	RuleParent RuleParent
	String     string
}

// RuleStatementDependenciesItemType is oneOf type of RuleStatementDependenciesItem.
type RuleStatementDependenciesItemType string

// Possible values for RuleStatementDependenciesItemType.
const (
	RuleParentRuleStatementDependenciesItem RuleStatementDependenciesItemType = "RuleParent"
	StringRuleStatementDependenciesItem     RuleStatementDependenciesItemType = "string"
)

// IsRuleParent reports whether RuleStatementDependenciesItem is RuleParent.
func (s RuleStatementDependenciesItem) IsRuleParent() bool {
	return s.Type == RuleParentRuleStatementDependenciesItem
}

// IsString reports whether RuleStatementDependenciesItem is string.
func (s RuleStatementDependenciesItem) IsString() bool {
	return s.Type == StringRuleStatementDependenciesItem
}

// SetRuleParent sets RuleStatementDependenciesItem to RuleParent.
func (s *RuleStatementDependenciesItem) SetRuleParent(v RuleParent) {
	s.Type = RuleParentRuleStatementDependenciesItem
	s.RuleParent = v
}

// GetRuleParent returns RuleParent and true boolean if RuleStatementDependenciesItem is RuleParent.
func (s RuleStatementDependenciesItem) GetRuleParent() (v RuleParent, ok bool) {
	if !s.IsRuleParent() {
		return v, false
	}
	return s.RuleParent, true
}

// NewRuleParentRuleStatementDependenciesItem returns new RuleStatementDependenciesItem from RuleParent.
func NewRuleParentRuleStatementDependenciesItem(v RuleParent) RuleStatementDependenciesItem {
	var s RuleStatementDependenciesItem
	s.SetRuleParent(v)
	return s
}

// SetString sets RuleStatementDependenciesItem to string.
func (s *RuleStatementDependenciesItem) SetString(v string) {
	s.Type = StringRuleStatementDependenciesItem
	s.String = v
}

// GetString returns string and true boolean if RuleStatementDependenciesItem is string.
func (s RuleStatementDependenciesItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRuleStatementDependenciesItem returns new RuleStatementDependenciesItem from string.
func NewStringRuleStatementDependenciesItem(v string) RuleStatementDependenciesItem {
	var s RuleStatementDependenciesItem
	s.SetString(v)
	return s
}

// Ref: #/components/schemas/Sample
type Sample struct {
	// The name of the sample file.
	FileName string `json:"file_name"`
	// The content of the sample file.
	Content string `json:"content"`
	// List of default inputs for the sample.
	DefaultInputs SampleDefaultInputs `json:"default_inputs"`
	// List of default data for the sample.
	DefaultData SampleDefaultData `json:"default_data"`
	// List of default queries for the sample.
	DefaultQueries SampleDefaultQueries `json:"default_queries"`
}

// GetFileName returns the value of FileName.
func (s *Sample) GetFileName() string {
	return s.FileName
}

// GetContent returns the value of Content.
func (s *Sample) GetContent() string {
	return s.Content
}

// GetDefaultInputs returns the value of DefaultInputs.
func (s *Sample) GetDefaultInputs() SampleDefaultInputs {
	return s.DefaultInputs
}

// GetDefaultData returns the value of DefaultData.
func (s *Sample) GetDefaultData() SampleDefaultData {
	return s.DefaultData
}

// GetDefaultQueries returns the value of DefaultQueries.
func (s *Sample) GetDefaultQueries() SampleDefaultQueries {
	return s.DefaultQueries
}

// SetFileName sets the value of FileName.
func (s *Sample) SetFileName(val string) {
	s.FileName = val
}

// SetContent sets the value of Content.
func (s *Sample) SetContent(val string) {
	s.Content = val
}

// SetDefaultInputs sets the value of DefaultInputs.
func (s *Sample) SetDefaultInputs(val SampleDefaultInputs) {
	s.DefaultInputs = val
}

// SetDefaultData sets the value of DefaultData.
func (s *Sample) SetDefaultData(val SampleDefaultData) {
	s.DefaultData = val
}

// SetDefaultQueries sets the value of DefaultQueries.
func (s *Sample) SetDefaultQueries(val SampleDefaultQueries) {
	s.DefaultQueries = val
}

// List of default data for the sample.
type SampleDefaultData struct {
	Default         string `json:"default"`
	AdditionalProps SampleDefaultDataAdditional
}

// GetDefault returns the value of Default.
func (s *SampleDefaultData) GetDefault() string {
	return s.Default
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *SampleDefaultData) GetAdditionalProps() SampleDefaultDataAdditional {
	return s.AdditionalProps
}

// SetDefault sets the value of Default.
func (s *SampleDefaultData) SetDefault(val string) {
	s.Default = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *SampleDefaultData) SetAdditionalProps(val SampleDefaultDataAdditional) {
	s.AdditionalProps = val
}

type SampleDefaultDataAdditional map[string]string

func (s *SampleDefaultDataAdditional) init() SampleDefaultDataAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// List of default inputs for the sample.
type SampleDefaultInputs struct {
	Default         string `json:"default"`
	AdditionalProps SampleDefaultInputsAdditional
}

// GetDefault returns the value of Default.
func (s *SampleDefaultInputs) GetDefault() string {
	return s.Default
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *SampleDefaultInputs) GetAdditionalProps() SampleDefaultInputsAdditional {
	return s.AdditionalProps
}

// SetDefault sets the value of Default.
func (s *SampleDefaultInputs) SetDefault(val string) {
	s.Default = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *SampleDefaultInputs) SetAdditionalProps(val SampleDefaultInputsAdditional) {
	s.AdditionalProps = val
}

type SampleDefaultInputsAdditional map[string]string

func (s *SampleDefaultInputsAdditional) init() SampleDefaultInputsAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// List of default queries for the sample.
type SampleDefaultQueries struct {
	Default         string `json:"default"`
	AdditionalProps SampleDefaultQueriesAdditional
}

// GetDefault returns the value of Default.
func (s *SampleDefaultQueries) GetDefault() string {
	return s.Default
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *SampleDefaultQueries) GetAdditionalProps() SampleDefaultQueriesAdditional {
	return s.AdditionalProps
}

// SetDefault sets the value of Default.
func (s *SampleDefaultQueries) SetDefault(val string) {
	s.Default = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *SampleDefaultQueries) SetAdditionalProps(val SampleDefaultQueriesAdditional) {
	s.AdditionalProps = val
}

type SampleDefaultQueriesAdditional map[string]string

func (s *SampleDefaultQueriesAdditional) init() SampleDefaultQueriesAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type VarTracePostOK struct {
	// The output of variable trace.
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *VarTracePostOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *VarTracePostOK) SetResult(val string) {
	s.Result = val
}
