openapi: 3.0.3
info:
  title: regoviz
  description: api for regoviz
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /samples:
    get:
      responses:
        '200':
          description: A list of samples
          content:
            application/json:
              schema:
                type: array
                description: List of sample files
                items:
                  $ref: '#/components/schemas/Sample'
  /depTreeText:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
      responses:
        '200':
          description: Dependency tree of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The generated dependency tree
                required:
                  - result

  /flowchart:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
        - in: query
          name: edit
          schema:
            type: boolean
          description: Whether to return the editable flowchart mermaid url
          required: false
      responses:
        '200':
          description: Flowchart mermaid url of given sample
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The generated flowchart mermaid url
                required:
                  - result
  /varTrace:
    post:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
        - in: query
          name: commands
          schema:
            type: string
          description: The commands to analyze
          required: true
        - in: query
          name: input
          schema:
            type: string
          description: The input to policy
          required: false
        - in: query
          name: data
          schema:
            type: string
          description: The data to policy
          required: false
        - in: query
          name: query
          schema:
            type: string
          description: The query to policy
          required: true
      responses:
        '200':
          description: Variable trace of given sample
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The output of variable trace
                required:
                  - result
  # returns as string of given file
  /ast:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
      responses:
        '200':
          description: AST of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The generated AST
                required: [ result ]
  /astPretty:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
      responses:
        '200':
          description: AST of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The generated AST
                required: [ result ]
  /ir:
    get:
      parameters:
        - in: query
          name: policy
          schema:
              type: string
          description: The rego code to analyze
          required: true
      responses:
        '200':
          description: IR of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The generated IR
                required: [ result ]
  /callTree:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
        - in: query
          name: entrypoint
          schema:
            type: string
          description: The entrypoint rule to analyze
          required: true
        # provide query at least to get eval steps
        - in: query
          name: input
          schema:
            type: string
          description: The input to policy
          required: false
        - in: query
          name: data
          schema:
            type: string
          description: The data to policy
          required: false
        - in: query
          name: query
          schema:
            type: string
          description: The query to policy
          required: false
      responses:
        '200':
          description: Call tree of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  entrypoint:
                    $ref: '#/components/schemas/RuleParent'
                  steps:
                      type: array
                      items:
                          $ref: '#/components/schemas/EvalStep'
                required: [ entrypoint ]
  /callTree/availableEntrypoints:
    get:
      parameters:
        - in: query
          name: policy
          schema:
            type: string
          description: The rego code to analyze
          required: true
      responses:
        '200':
          description: Available entrypoints of given module
          content:
            application/json:
              schema:
                type: object
                properties:
                  entrypoints:
                    type: array
                    items:
                      type: string
                required: [ entrypoints ]

components:
  schemas:
    Sample:
      type: object
      description: OPA policy that can be used with this API.
      properties:
        file_name:
          type: string
          description: The name of the sample file.
        content:
          type: string
          description: The content of the sample file.
        input_examples:
          type: object
          description: List of input examples for the sample.
          properties:
            default:
              type: string
              description: The default input for the sample. Can be empty.
          required: [ default ]
          additionalProperties:
            type: string
        data_examples:
            type: object
            description: List of data examples for the sample.
            properties:
              default:
                type: string
                description: The default data for the sample. Can be empty.
            required: [ default ]
            additionalProperties:
                type: string
        query_examples:
          type: object
          description: List of query examples for the sample.
          properties:
            default:
              type: string
              description: The default query for the sample. Can be empty.
          required: [ default ]
          additionalProperties:
            type: string
      required: [ file_name, content, input_examples, data_examples, query_examples ]

    NodeLocation:
        type: object
        properties:
          row:
            type: integer
          col:
            type: integer
        required: [ row, col ]
    NodeBase:
      type: object
      properties:
        name:
          type: string
        uid:
          type: string
        location:
            $ref: '#/components/schemas/NodeLocation'
      required: [ name, uid ]

    RuleParent:
      allOf:
        - $ref: '#/components/schemas/NodeBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ 'parent' ]
            default:
              type: string
            children:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/RuleChild'
                  - $ref: '#/components/schemas/RuleChildElse'
            ref:
              type: string
          required: [ type, default, children, ref ]

    RuleChild:
      allOf:
        - $ref: '#/components/schemas/NodeBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ 'child' ]
            value:
              type: string
            statements:
              type: array
              items:
                $ref: '#/components/schemas/RuleStatement'
          required: [ type, parent, value, statements ]

    RuleChildElse:
      allOf:
        - $ref: '#/components/schemas/NodeBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ 'child-else' ]
            children:
              type: array
              items:
                $ref: '#/components/schemas/RuleChild'
          required: [ type, parent, children ]

    RuleStatement:
      allOf:
        - $ref: '#/components/schemas/NodeBase'
        - type: object
          properties:
            dependencies:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/RuleParent'
                  - type: string
          required: [ dependencies ]

    EvalStep:
      type: object
      properties:
        index:
          type: integer
        message:
          type: string
        targetNodeUid:
          type: string
      required: [ index, message, targetNodeUid ]

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
security:
  - bearerAuth: [ ]
